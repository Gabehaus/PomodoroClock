{"version":3,"sources":["components/TimeSet.js","components/Timer.js","components/Controls.js","App.js","hooks/useInterval.js","serviceWorker.js","index.js"],"names":["TimeSet","type","value","block","setter","val","setVal","class","id","toLowerCase","onClick","icon","faArrowUp","size","className","faArrowDown","Timer","currentMode","currentTime","time","ms","p","unit","pattern","arrayPattern","split","clock","minutes","Math","floor","seconds","addUnitToClock","length","push","i","j","match","join","convertMilliseconds","Controls","activeStatus","handleReset","active","setActive","faPause","faPlay","faSync","App","useState","sessionLength","setSessionLength","breakLength","setBreakLength","setTime","blockType","setBlockType","qRef","useRef","callback","delay","savedCallback","useEffect","current","setInterval","clearInterval","useInterval","handleSessionLengthChange","play","pause","src","ref","title","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1abf305.chunk.js","sourcesContent":["import React from \"react\";\nimport App from \"../App\";\nimport { faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst TimeSet = ({ type, value, block, setter }) => {\n  const [val, setVal] = value;\n\n  const handleIncrement = () => {\n    if (val >= 60) {\n      return null;\n    } else {\n      setVal(val + 1);\n      if (block == type) {\n        setter((val + 1) * 60 * 1000);\n      }\n    }\n  };\n  const handleDecrement = () => {\n    if (val === 1) {\n      return null;\n    } else {\n      setVal(val - 1);\n      if (block == type) {\n        setter((val + 1) * 60 * 1000);\n      }\n    }\n  };\n  return (\n    <div class=\"control\">\n      <h2 id={`${type.toLowerCase()}-label`}>\n        {type} <br />\n        Length\n      </h2>\n      <div id=\"arrow-wrapper\">\n        <button\n          id={`${type.toLowerCase()}-increment`}\n          onClick={handleIncrement}\n        >\n          <FontAwesomeIcon\n            icon={faArrowUp}\n            size=\"3x\"\n            className=\"button\"\n          ></FontAwesomeIcon>\n        </button>\n        <h3 id={`${type.toLowerCase()}-length`} className=\"button\">\n          {val}\n        </h3>\n        <button\n          id={`${type.toLowerCase()}-decrement`}\n          onClick={handleDecrement}\n          className=\"button\"\n        >\n          <FontAwesomeIcon\n            icon={faArrowDown}\n            size=\"3x\"\n            className=\"button\"\n          ></FontAwesomeIcon>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeSet;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst Timer = ({ currentMode, currentTime }) => {\n  const [breakType] = currentMode;\n  const [time] = currentTime;\n\n  var convertMilliseconds = (ms, p) => {\n    let pattern = p,\n      arrayPattern = pattern.split(\":\"),\n      clock = [],\n      minutes = Math.floor(ms / 60000), // 1 Minutes = 60000 Milliseconds\n      seconds = Math.floor(((ms % 360000) % 60000) / 1000); // 1 Second = 1000 Milliseconds\n    // build the clock result\n    function createClock(unit) {\n      // match the pattern to the corresponding variable\n      if (pattern.match(unit)) {\n        if (unit.match(/mm/)) {\n          addUnitToClock(minutes, unit);\n        }\n        if (unit.match(/ss/)) {\n          addUnitToClock(seconds, unit);\n        }\n      }\n    }\n    function addUnitToClock(val, unit) {\n      if (val < 10 && unit.length === 2) {\n        val = \"0\" + val;\n      }\n      clock.push(val); // push the values into the clock array\n    }\n    // loop over the pattern building out the clock result\n    for (var i = 0, j = arrayPattern.length; i < j; i++) {\n      createClock(arrayPattern[i]);\n    }\n    return clock.join(\":\");\n  };\n  return (\n    <>\n      <h3 id=\"time-left\">{convertMilliseconds(time, \"mm:ss\")}</h3>\n    </>\n  );\n};\n\nexport default Timer;\n","import React from \"react\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { faPause } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Controls = ({ activeStatus, handleReset }) => {\n  const [active, setActive] = activeStatus;\n  return (\n    <div id=\"controls-wrapper\">\n      <button id=\"start_stop\" onClick={() => setActive(!active)}>\n        {active ? (\n          <FontAwesomeIcon\n            icon={faPause}\n            size=\"3x\"\n            className=\"gyphicon\"\n          ></FontAwesomeIcon>\n        ) : (\n          <FontAwesomeIcon\n            icon={faPlay}\n            size=\"3x\"\n            className=\"gyphicon\"\n          ></FontAwesomeIcon>\n        )}\n      </button>\n      <div id=\"gap\"></div>\n      <button id=\"reset\" onClick={handleReset}>\n        <FontAwesomeIcon\n          icon={faSync}\n          size=\"3x\"\n          className=\"gyphicon\"\n        ></FontAwesomeIcon>\n      </button>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useInterval } from \"./hooks/useInterval\";\nimport moment from \"moment\";\nimport TimeSet from \"./components/TimeSet\";\nimport Timer from \"./components/Timer\";\nimport Controls from \"./components/Controls\";\n\n//PomApr2020responsiveB\nfunction App() {\n  // active set to true means clock is running\n  const [active, setActive] = useState(false);\n  const [sessionLength, setSessionLength] = useState(25);\n\n  const [breakLength, setBreakLength] = useState(5);\n\n  const [time, setTime] = useState(sessionLength * 60 * 1000);\n\n  // blockType can be set to \"Session\" or \"Break\" and is displayed by id=\"timer-label\"\n  const [blockType, setBlockType] = useState(\"Session\");\n\n  //ref referring to audio element\n  let qRef = useRef();\n\n  //initial call of setInterval\n  useInterval(() => setTime(time - 1000), active ? 1000 : null);\n\n  useEffect(() => {\n    handleSessionLengthChange();\n  }, [sessionLength]);\n\n  function handleSessionLengthChange() {\n    if (blockType == \"Session\") {\n      setTime(sessionLength * 60 * 1000);\n    } else {\n      return null;\n    }\n  }\n\n  //function called by setInterval - Problem here in that I set seconds to 59???\n  useEffect(() => {\n    if (time === 0 && blockType == \"Session\") {\n      setTime(breakLength * 60 * 1000);\n      setBlockType(\"Break\");\n      qRef.current.play();\n      qRef.current.currentTime = 0;\n    } else if (time === 0 && blockType == \"Break\") {\n      setTime(sessionLength * 60 * 1000);\n      setBlockType(\"Session\");\n      qRef.current.play();\n      qRef.current.currentTime = 0;\n    }\n  }, [time, blockType, sessionLength, breakLength]);\n\n  //function called onClick of reset button\n  function resetting() {\n    setActive(false);\n\n    setSessionLength(25);\n\n    setBreakLength(5);\n    qRef.current.pause();\n    qRef.current.currentTime = 0;\n    setTime(25 * 60 * 1000);\n    setBlockType(\"Session\");\n  }\n\n  //conditions for dealing with the click of buttons that change session and break times\n\n  return (\n    <div id=\"wrap-all\">\n      <div className=\"App\">\n        <div id=\"black-board-1\">\n          <div id=\"title\">Pomodoro Clock</div>\n          <div id=\"timer-wrapper\">\n            <Timer\n              id=\"timer\"\n              currentTime={[time]}\n              currentMode={[blockType, setBlockType]}\n            />\n          </div>\n          <div id=\"button-wrapper\">\n            <Controls\n              activeStatus={[active, setActive]}\n              handleReset={resetting}\n            />\n          </div>\n          <audio\n            src=\"https://freecodecampassets.s3.us-east-2.amazonaws.com/Clock+Sounds/37720__still-frames__om.mp3\"\n            type=\"audio/ogg\"\n            className=\"clip\"\n            id=\"beep\"\n            ref={qRef}\n            title=\"Ohm\"\n          ></audio>\n        </div>\n        <div id=\"black-board-2\">\n          <div id=\"timer-label\">\n            {blockType === \"Session\" ? \"Session\" : \"Break\"}\n          </div>\n        </div>\n      </div>\n      <div id=\"control-box-wrapper\">\n        {\" \"}\n        <div id=\"control-box\">\n          <TimeSet type={\"Break\"} value={[breakLength, setBreakLength]} />\n        </div>\n        <div id=\"control-gap\"></div>\n        <div id=\"control-box2\">\n          <TimeSet\n            type={\"Session\"}\n            value={[sessionLength, setSessionLength]}\n            block={blockType}\n            setter={setTime}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}